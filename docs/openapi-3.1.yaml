openapi: 3.1.0
info:
  description: Uzo Food Tracking API - Simplified for Custom GPT
  title: Uzo Food Tracking API
  version: 13.0.4
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://amehiertzqtbtcjhugql.supabase.co/rest/v1
    description: Supabase REST API (production)
x-user-id: 43af6e15-1b3d-4634-be91-d59cf414a33e
security:
  - apiKeyAuth: []
paths:
  /weekly_analytics_cache:
    get:
      operationId: getWeeklyAnalyticsCache
      summary: Get weekly nutrition averages and trends
      description: Use when user asks "show my weekly nutrition trends", "average calories per week", "how did I eat this week
        vs last week". Shows weekly averages and days with data. Perfect for trend analysis.
      parameters:
        - name: select
          in: query
          description: "Columns to retrieve (default: *)."
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order clause, e.g. week_start.desc.
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: week_start
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/weekly_analytics_cache"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /daily_analytics_cache:
    get:
      operationId: getDailyAnalyticsCache
      summary: Get daily nutrition summaries (macros per day)
      description: Use when user asks "show my macros for each day", "how many calories did I eat yesterday", "my daily
        nutrition breakdown". Pre-calculated daily totals - much faster than summing meal_logs. Filter by date for
        specific days.
      parameters:
        - name: select
          in: query
          description: "Columns to retrieve (default: *)."
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order clause, e.g. date.desc.
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/daily_analytics_cache"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /monthly_analytics_cache:
    get:
      operationId: getMonthlyAnalyticsCache
      summary: Get monthly nutrition averages and long-term patterns
      description: Use when user asks "show my monthly nutrition patterns", "how did I eat this month", "monthly macro
        averages". Best for long-term tracking and monthly comparisons.
      parameters:
        - name: select
          in: query
          description: "Columns to retrieve (default: *)."
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order clause, e.g. month_start.desc.
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: month_start
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/monthly_analytics_cache"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /meal_logs:
    get:
      operationId: getMealLogs
      summary: Find and retrieve specific meals
      description: 'Find meals by ingredients or notes. Use search_vector=fts.chicken for "meals with chicken". Results leverage
        meal_logs.search_vector trigger and pg_trgm GIN indexes for fuzzy matches on meal_name, notes, and items. For analytics
        use cache endpoints.'
      parameters:
        - name: select
          in: query
          description: "Columns to retrieve (default: *)."
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order clause, e.g. eaten_on.desc.
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: eaten_on
          in: query
          required: false
          description: Use when user asks for meals from specific dates like "what did I eat yesterday", "meals from last week".
            Use eq.2025-01-15 for exact date, gte.2025-01-01 for "since January".
          schema:
            type: string
            format: date
          examples:
            exact_date:
              summary: Specific date
              value: eq.2025-01-15
              description: "Meals eaten on January 15th. Query: ?eaten_on=eq.2025-01-15"
            since_date:
              summary: Since date
              value: gte.2025-01-01
              description: "Meals since January 1st. Query: ?eaten_on=gte.2025-01-01"
            date_range:
              summary: Date range
              value: gte.2025-01-01&eaten_on=lte.2025-01-31
              description: Meals in January. Combine with &eaten_on=lte.2025-01-31
        - name: meal_name
          in: query
          required: false
          description: Use when user asks for meals by exact name like "show me Greek Yogurt Bowl" (use eq.) or partial name like
            "meals with chicken in the name" (use ilike.*chicken*)
          schema:
            type: string
          examples:
            exact_match:
              summary: Exact match
              value: eq.Greek Yogurt Bowl
              description: "Find meals with exact name 'Greek Yogurt Bowl'. Query: ?meal_name=eq.Greek Yogurt Bowl"
            fuzzy_search:
              summary: Fuzzy search
              value: ilike.*chicken*
              description: "Find meal names containing 'chicken' (case-insensitive). Query: ?meal_name=ilike.*chicken*"
            starts_with:
              summary: Starts with
              value: ilike.Breakfast*
              description: "Find meals starting with 'Breakfast'. Query: ?meal_name=ilike.Breakfast*"
        - name: search_vector
          in: query
          required: false
          description: 'Use for semantic food searches like "meals with chicken", "breakfast with eggs", "dinner without meat".
            Searches across meal names, ingredients, and notes via the maintained meal_logs.search_vector column. Format:
            fts.chicken for single ingredient, fts.chicken&vegetables for AND, fts.breakfast|lunch for OR. Combines with the
            pg_trgm-backed ilike filters on meal_name/notes/items for substring-style fuzzy matching when you need "contains"
            behavior.'
          schema:
            type: string
          examples:
            and_search:
              summary: AND search
              value: fts.chicken&vegetables
              description: "Find meals containing both 'chicken' AND 'vegetables'. Query: ?search_vector=fts.chicken&vegetables"
            or_search:
              summary: OR search
              value: fts.breakfast|lunch
              description: "Find meals containing 'breakfast' OR 'lunch'. Query: ?search_vector=fts.breakfast|lunch"
            not_search:
              summary: NOT search
              value: fts.chicken&!fried
              description: "Find chicken meals that are NOT fried. Query: ?search_vector=fts.chicken&!fried"
        - name: notes
          in: query
          required: false
          description: Use when user asks about meal context like "meals I marked as healthy", "dinners I enjoyed", "meals with
            notes about being tasty". Searches user comments and notes.
          schema:
            type: string
          examples:
            contains:
              summary: Contains text
              value: ilike.*dinner*
              description: "Find meals with notes containing 'dinner'. Query: ?notes=ilike.*dinner*"
            healthy_meals:
              summary: Healthy meals
              value: ilike.*healthy*
              description: "Find meals with 'healthy' in notes. Query: ?notes=ilike.*healthy*"
            not_empty:
              summary: Has notes
              value: not.is.null
              description: "Find meals that have notes (not empty). Query: ?notes=not.is.null"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/meal_logs"
      tags:
        - Meal Logs
      security:
        - apiKeyAuth: []
    post:
      operationId: createMealLog
      summary: Log a new meal or re-log an existing one
      description: "Use when user says \"log this meal\", \"I ate chicken again\", or \"re-log yesterday's dinner\". For
        re-logging: first GET the original meal from meal_logs, copy the meal_name/items/macros, then POST with new
        eaten_on date. Always include complete macros object with calories, protein, carbs, fat."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/meal_logs"
            examples:
              minimalMealLog:
                summary: Minimal meal log
                description: Smallest recommended payload to create a meal log entry
                value:
                  meal_name: Greek Yogurt Bowl
                  items:
                    - 1 cup plain Greek yogurt
                    - 1/2 cup blueberries
                  macros:
                    calories: 210
                    protein: 20
                    carbs: 18
                    fat: 7
                  eaten_on: 2025-01-15
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
              fullMealLog:
                summary: Full meal log with rating and notes
                description: Includes optional fields commonly captured by the app
                value:
                  meal_name: Spicy Chicken Stir Fry
                  items:
                    - 8 oz chicken breast
                    - 1 cup mixed vegetables
                    - 1 tbsp soy sauce
                  notes: Weeknight dinner, lots of veggies
                  rating: 4.5
                  macros:
                    calories: 520
                    protein: 55
                    carbs: 32
                    fat: 18
                  eaten_on: 2025-01-14
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/meal_logs"
      tags:
        - Meal Logs
      security:
        - apiKeyAuth: []
    patch:
      operationId: updateMealLog
      summary: Update a meal log
      description: Updates an existing meal log entry. Include only the fields you want to update.
      parameters:
        - name: Prefer
          in: header
          required: false
          description: Ask PostgREST to return changed rows.
          schema:
            type: string
            example: return=representation
        - name: id
          in: query
          required: true
          description: PostgREST filter syntax, e.g. id=eq.123
          schema:
            type: string
          example: eq.123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/meal_logs_update"
            examples:
              updateRating:
                summary: Update meal rating
                description: Update just the rating for a meal
                value:
                  rating: 5
              updateMacros:
                summary: Update macros
                description: Update nutrition information for a meal
                value:
                  macros:
                    calories: 550
                    protein: 60
                    carbs: 35
                    fat: 20
              fullUpdate:
                summary: Full meal update
                description: Update multiple fields including notes and rating
                value:
                  meal_name: Updated Chicken Stir Fry
                  notes: Added extra vegetables, very filling
                  rating: 4.8
                  macros:
                    calories: 580
                    protein: 58
                    carbs: 38
                    fat: 22
      responses:
        "204":
          description: No Content
      tags:
        - Meal Logs
      security:
        - apiKeyAuth: []
  /recipes:
    get:
      operationId: getRecipes
      summary: Search recipes by name, ingredients, or notes
      description: >
        Use for recipe discovery like "find vegetarian pasta", "show chicken soup ideas", "dishes with roasted vegetables".
        Requests leverage the recipes.search_vector column maintained by the update_recipes_search_vector trigger so results
        mirror the in-app Supabase full-text search.
      parameters:
        - name: select
          in: query
          description: "Columns to retrieve (default: *)."
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order clause, e.g. name.asc.
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: search_vector
          in: query
          required: false
          description: >
            Use Supabase full-text search for intent-style queries like "vegetarian dinner", "quick breakfast bowls" or "salmon
            without dairy". Searches across recipe names, instructions, notes, ingredient_list text, and feedback comments
            through the maintained recipes.search_vector column so it stays in sync with trigger updates. Combine with other
            filters as needed, e.g. ?user_id=eq.{uuid}&search_vector=fts.vegetarian&search_vector=fts.quinoa for AND matches.
          schema:
            type: string
          examples:
            single_term:
              summary: Single ingredient or concept
              value: fts.vegetarian
              description: "Find recipes mentioning 'vegetarian'. Query: ?user_id=eq.{uuid}&search_vector=fts.vegetarian"
            multi_term_and:
              summary: Require multiple ingredients
              value: fts.chicken&rice
              description: "Find recipes mentioning both chicken AND rice. Query: ?user_id=eq.{uuid}&search_vector=fts.chicken&rice"
            exclude_term:
              summary: Exclude an ingredient
              value: fts.soup&!cream
              description: "Find soups that do not mention cream. Query: ?user_id=eq.{uuid}&search_vector=fts.soup&!cream"
        - name: is_favorite
          in: query
          required: false
          schema:
            type: boolean
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/recipes"
      tags:
        - Recipes
      security:
        - apiKeyAuth: []
    post:
      operationId: createRecipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/recipes"
      responses:
        "201":
          description: Created
      tags:
        - Recipes
      security:
        - apiKeyAuth: []
    patch:
      operationId: updateRecipe
      summary: Update a recipe
      description: Updates an existing recipe entry. Include only the fields you want to update.
      parameters:
        - name: Prefer
          in: header
          required: false
          description: Ask PostgREST to return changed rows.
          schema:
            type: string
            example: return=representation
        - name: id
          in: query
          required: true
          description: PostgREST filter syntax, e.g. id=eq.123
          schema:
            type: string
          example: eq.123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/recipes_update"
            examples:
              updateName:
                summary: Update recipe name
                description: Update just the name for a recipe
                value:
                  name: Updated Chicken Stir Fry
              updateFavorite:
                summary: Mark as favorite
                description: Update the favorite status of a recipe
                value:
                  is_favorite: true
              updateNotes:
                summary: Update notes
                description: Update recipe notes and cooking feedback
                value:
                  notes: Added more vegetables, very satisfying meal
                  times_cooked: 5
              fullUpdate:
                summary: Full recipe update
                description: Update multiple fields including instructions and nutrition
                value:
                  name: Enhanced Chicken Stir Fry
                  total_time: 25
                  servings: 4
                  instructions: Heat oil, cook chicken, add vegetables, season with soy sauce
                  is_favorite: true
                  notes: Family favorite recipe, very healthy
                  ingredient_list:
                    - 1 lb chicken breast
                    - 2 cups mixed vegetables
                    - 2 tbsp soy sauce
      responses:
        "204":
          description: No Content
      tags:
        - Recipes
      security:
        - apiKeyAuth: []
  /items:
    get:
      operationId: getItems
      parameters:
        - name: select
          in: query
          description: "Columns to retrieve (default: *)."
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order clause, e.g. name.asc.
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: category
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/items"
      tags:
        - Items
      security:
        - apiKeyAuth: []
    post:
      operationId: createItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/items"
      responses:
        "201":
          description: Created
      tags:
        - Items
      security:
        - apiKeyAuth: []
    patch:
      operationId: updateItem
      summary: Update an item
      description: Updates an existing food item entry. Include only the fields you want to update.
      parameters:
        - name: Prefer
          in: header
          required: false
          description: Ask PostgREST to return changed rows.
          schema:
            type: string
            example: return=representation
        - name: id
          in: query
          required: true
          description: PostgREST filter syntax, e.g. id=eq.123
          schema:
            type: string
          example: eq.123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/items_update"
            examples:
              updateName:
                summary: Update item name
                description: Update just the name for an item
                value:
                  name: Updated Chicken Breast
              updateNutrition:
                summary: Update nutrition info
                description: Update nutrition information for an item
                value:
                  nutrition_per_serving:
                    calories: 165
                    protein: 31
                    carbs: 0
                    fat: 3.6
              fullUpdate:
                summary: Full item update
                description: Update multiple fields including category and notes
                value:
                  name: Premium Organic Chicken Breast
                  category: Protein
                  brand: Organic Valley
                  notes:
                    - High quality protein source
                    - Good for meal prep
      responses:
        "204":
          description: No Content
      tags:
        - Items
      security:
        - apiKeyAuth: []
  /rpc/get_analytics_data:
    get:
      operationId: getAnalyticsData
      summary: Get comprehensive analytics (daily, weekly, monthly combined)
      description: Use when user asks for "complete nutrition overview", "all my analytics", or wants daily/weekly/monthly
        data in one call. Returns combined analytics data structure. Use specific cache endpoints for targeted queries.
      parameters:
        - name: p_user_id
          in: query
          required: false
          description: User ID parameter for RPC function
          schema:
            type: string
            format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: p_days_back
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/analytics_data"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /rpc/bulk_insert_items:
    post:
      operationId: bulkInsertItems
      summary: Bulk insert multiple food items
      description: Use when user wants to add multiple food items at once like "add these grocery items", "import my shopping
        list". More efficient than individual POST requests for 3+ items. Each item needs at least a name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items_data:
                  type: array
                  items:
                    $ref: "#/components/schemas/items"
              required:
                - items_data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
      tags:
        - Bulk Operations
      security:
        - apiKeyAuth: []
  /rpc/bulk_insert_recipes:
    post:
      operationId: bulkInsertRecipes
      summary: Bulk insert multiple recipes
      description: Use when user wants to add multiple recipes at once like "add these meal prep recipes", "import my dinner
        recipes". More efficient than individual POST requests for 3+ recipes. Each recipe needs at least a name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipes_data:
                  type: array
                  items:
                    $ref: "#/components/schemas/recipes"
              required:
                - recipes_data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
      tags:
        - Bulk Operations
      security:
        - apiKeyAuth: []
  /rpc/bulk_insert_meal_logs:
    post:
      operationId: bulkInsertMealLogs
      summary: Bulk insert multiple meal logs
      description: Insert multiple meal log entries in a single operation. Each meal log must include meal_name, items,
        macros, and eaten_on.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_logs_data:
                  type: array
                  items:
                    $ref: "#/components/schemas/meal_logs"
              required:
                - meal_logs_data
            example:
              meal_logs_data:
                - meal_name: Breakfast Bowl
                  items:
                    - 1 cup oatmeal
                    - 1/2 cup blueberries
                    - 1 tbsp honey
                  macros:
                    calories: 320
                    protein: 12
                    carbs: 65
                    fat: 6
                  eaten_on: 2025-01-15
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
                - meal_name: Lunch Salad
                  items:
                    - 2 cups mixed greens
                    - 4 oz grilled chicken
                    - 1/4 cup feta cheese
                  macros:
                    calories: 280
                    protein: 35
                    carbs: 8
                    fat: 12
                  eaten_on: 2025-01-15
                  rating: 4
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
      tags:
        - Bulk Operations
      security:
        - apiKeyAuth: []
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: apikey
  schemas:
    weekly_analytics_cache:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        week_start:
          type: string
          format: date
        avg_calories:
          type: number
        avg_protein:
          type: number
        avg_carbs:
          type: number
        avg_fat:
          type: number
        days_with_data:
          type: integer
        updated_at:
          type: string
          format: date-time
    daily_analytics_cache:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        date:
          type: string
          format: date
        calories:
          type: number
        protein:
          type: number
        carbs:
          type: number
        fat:
          type: number
        meals_count:
          type: integer
        updated_at:
          type: string
          format: date-time
    monthly_analytics_cache:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        month_start:
          type: string
          format: date
        avg_calories:
          type: number
        avg_protein:
          type: number
        avg_carbs:
          type: number
        avg_fat:
          type: number
        days_with_data:
          type: integer
        updated_at:
          type: string
          format: date-time
    meal_logs:
      type: object
      required:
        - meal_name
        - items
        - eaten_on
        - macros
        - user_id
      properties:
        id:
          type: integer
        meal_name:
          type: string
          example: Greek Yogurt Bowl
        notes:
          type: string
          example: Weeknight dinner, lots of veggies
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.5
        macros:
          type: object
          description: Macronutrient totals for the meal. Keys should be numeric values in grams (except calories).
          properties:
            calories:
              type: integer
              example: 520
            protein:
              type: integer
              example: 45
            carbs:
              type: integer
              example: 50
            fat:
              type: integer
              example: 18
          additionalProperties: false
          example:
            calories: 520
            protein: 45
            carbs: 50
            fat: 18
        created_at:
          type: string
          format: date-time
        items:
          type: array
          description: Free-form list of meal components supplied by the user.
          items:
            type: string
          minItems: 1
          example:
            - 8 oz chicken breast
            - 1 cup mixed vegetables
            - 1 tbsp soy sauce
        eaten_on:
          type: string
          format: date
          example: 2025-01-14
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
    meal_logs_update:
      type: object
      description: Schema for updating meal logs. All fields are optional for partial updates.
      properties:
        meal_name:
          type: string
          example: Updated Chicken Stir Fry
        notes:
          type: string
          example: Added extra vegetables, very filling
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.8
        macros:
          type: object
          description: Macronutrient totals for the meal. Keys should be numeric values in grams (except calories).
          properties:
            calories:
              type: integer
              example: 580
            protein:
              type: integer
              example: 58
            carbs:
              type: integer
              example: 38
            fat:
              type: integer
              example: 22
          additionalProperties: false
        items:
          type: array
          description: Free-form list of meal components supplied by the user.
          items:
            type: string
          minItems: 1
          example:
            - 8 oz chicken breast (updated)
            - 1.5 cups mixed vegetables
            - 1 tbsp soy sauce
        eaten_on:
          type: string
          format: date
          example: 2025-01-14
    recipes:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        total_time:
          type: integer
        servings:
          type: integer
        instructions:
          type: string
        nutrition_per_serving:
          type: object
        is_favorite:
          type: boolean
          default: false
        source_link:
          type: string
        notes:
          type: string
        times_cooked:
          type: integer
          default: 0
        last_cooked:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        ingredient_list:
          type: array
          items:
            type: string
        nutrition_source:
          type: string
          default: calculated
        feedback:
          type: array
          items:
            type: object
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        tags:
          type: array
          items:
            type: string
    items:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        brand:
          type: string
        category:
          type: string
        image_url:
          type: string
        ingredients:
          type: string
        purchase_count:
          type: integer
          default: 0
        rating:
          type: integer
        last_edited:
          type: string
          format: date-time
        normalized_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        notes:
          type: array
          items:
            type: object
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
    items_update:
      type: object
      description: Schema for updating items. All fields are optional for partial updates.
      properties:
        name:
          type: string
          example: Updated Chicken Breast
        brand:
          type: string
          example: Organic Valley
        category:
          type: string
          example: Protein
        image_url:
          type: string
          example: https://example.com/chicken.jpg
        ingredients:
          type: string
          example: Organic chicken breast
        purchase_count:
          type: integer
          example: 5
        rating:
          type: integer
          example: 4
        notes:
          type: array
          items:
            type: object
          example:
            - High quality protein source
            - Good for meal prep
        nutrition_per_serving:
          type: object
          example:
            calories: 165
            protein: 31
            carbs: 0
            fat: 3.6
    recipes_update:
      type: object
      description: Schema for updating recipes. All fields are optional for partial updates.
      properties:
        name:
          type: string
          example: Updated Chicken Stir Fry
        total_time:
          type: integer
          example: 25
        servings:
          type: integer
          example: 4
        instructions:
          type: string
          example: Heat oil, cook chicken, add vegetables, season with soy sauce
        nutrition_per_serving:
          type: object
          example:
            calories: 520
            protein: 45
            carbs: 35
            fat: 18
        is_favorite:
          type: boolean
          example: true
        source_link:
          type: string
          example: https://example.com/recipe
        notes:
          type: string
          example: Family favorite recipe, very healthy
        times_cooked:
          type: integer
          example: 5
        ingredient_list:
          type: array
          items:
            type: string
          example:
            - 1 lb chicken breast
            - 2 cups mixed vegetables
            - 2 tbsp soy sauce
        nutrition_source:
          type: string
          example: calculated
        feedback:
          type: array
          items:
            type: object
        tags:
          type: array
          items:
            type: string
          example:
            - healthy
            - quick
    analytics_data:
      type: object
      properties:
        daily_data:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              calories:
                type: number
              protein:
                type: number
              carbs:
                type: number
              fat:
                type: number
              meals_count:
                type: integer
        weekly_data:
          type: array
          items:
            type: object
            properties:
              week_start:
                type: string
                format: date
              avg_calories:
                type: number
              avg_protein:
                type: number
              avg_carbs:
                type: number
              avg_fat:
                type: number
              days_with_data:
                type: integer
        monthly_data:
          type: array
          items:
            type: object
            properties:
              month_start:
                type: string
                format: date
              avg_calories:
                type: number
              avg_protein:
                type: number
              avg_carbs:
                type: number
              avg_fat:
                type: number
              days_with_data:
                type: integer
